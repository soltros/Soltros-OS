  build_push_alma:
    name: Build and push SoltrOS LTS (Alma) image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Prepare environment
        run: |
          echo "IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY,, }}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=soltros-os_lts" >> ${GITHUB_ENV}
          echo "DEFAULT_TAG=alma-lts" >> ${GITHUB_ENV}
          echo "EL_MAJOR=10" >> ${GITHUB_ENV}

      # âœ… Use your renamed LTS branch
      - name: Checkout Alma branch
        uses: actions/checkout@v4
        with:
          ref: soltros-os-lts

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@517622d6452028f266b7ba4cc9a123b5f58a6b53 # v7
        with:
          remove-codeql: true

      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main

      - name: Get current date
        id: date
        run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Image Metadata (Alma LTS)
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=raw,value=alma-kde-el${{ env.EL_MAJOR }}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=SoltrOS LTS based on AlmaLinux Atomic KDE
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/soltros-os
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Build SoltrOS LTS (Alma) Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./images/alma-kde/Containerfile
          build-args: |
            BASE_IMAGE=quay.io/almalinuxorg/atomic-desktop-kde
            TAG_VERSION=${{ env.EL_MAJOR }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          oci: false

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push To GHCR (Alma LTS)
        id: push
        uses: redhat-actions/push-to-registry@v2
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.10.0
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign Alma LTS image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          IMAGE_FULL="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL@${{ env.DIGEST }}
