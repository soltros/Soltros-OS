name: Build and Push SoltrOS Images

on:
  pull_request:
    branches:
      - main
      - soltros-os-lts
      - soltros-lts_cosmic
      - soltros-unstable_cosmic
      - soltros-lts_miracle
      - soltros-unstable_miracle
  schedule:
    - cron: '0 6 * * 0,2,4'  # 6am UTC every Sunday (0), Tuesday (2), Thursday (4)
  push:
    branches:
      - main
      - soltros-os-lts
      - soltros-lts_cosmic
      - soltros-unstable_cosmic
      - soltros-lts_liri
      - soltros-unstable_liri
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  IMAGE_DESC: "Gaming-optimized immutable Linux distribution based on Fedora with MacBook support, gaming enhancements, and CachyOS kernel performance"
  IMAGE_KEYWORDS: "bootc,ublue,universal-blue,gaming,cachyos,macbook,fedora,immutable"
  IMAGE_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  DEFAULT_TAG: "latest"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push_matrix:
    name: Build & push (${{ matrix.image }}) from ${{ matrix.branch }}
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          # Unstable/KDE (main)
          - branch: main
            image: soltros-os
          # LTS/KDE
          - branch: soltros-os-lts
            image: soltros-os_lts
          # LTS/Cosmic
          - branch: soltros-lts_cosmic
            image: soltros-lts_cosmic
          # Unstable/Cosmic
          - branch: soltros-unstable_cosmic
            image: soltros-unstable_cosmic
          # LTS/Liri
          - branch: soltros-lts_liri
            image: soltros-lts_liri
          # Unstable/Liri
          - branch: soltros-unstable_liri
            image: soltros-unstable_liri
    steps:
      - name: Prepare environment
        shell: bash
        run: |
          echo "IMAGE_REGISTRY=$(echo "${IMAGE_REGISTRY}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          echo "IMAGE_NAME=$(echo "${{ matrix.image }}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

      - name: Checkout ${{ matrix.branch }}
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4
        with:
          ref: ${{ matrix.branch }}

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@517622d6452028f266b7ba4cc9a123b5f58a6b53 # v7
        with:
          remove-codeql: true

      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main

      - name: Get current date
        id: date
        run: |
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/${{ matrix.branch }}/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/${{ matrix.branch }}/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/${{ matrix.branch }}/Dockerfile
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=${{ env.IMAGE_KEYWORDS }}
            io.artifacthub.package.license=GPL-3.0
            io.artifacthub.package.logo-url=${{ env.IMAGE_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Build Image (${{ env.IMAGE_NAME }})
        id: build_image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: |
            ./Dockerfile
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          oci: false
          no-cache: true
          layers: false

      # Compute once: should this job publish?
      - name: Decide if we should publish
        id: publish
        shell: bash
        run: |
          echo "Current branch: ${{ github.ref }}"
          echo "Matrix branch: refs/heads/${{ matrix.branch }}"
          echo "Event name: ${{ github.event_name }}"
          
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Publishing due to schedule or manual trigger"
            echo "publish=true" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # For push events, check if we're on one of the target branches
            case "${{ github.ref }}" in
              "refs/heads/main"|"refs/heads/soltros-os-lts"|"refs/heads/soltros-os-unstable_cosmic"|"refs/heads/soltros-os-lts_cosmic"|"refs/heads/soltros-os-unstable_gnome"|"refs/heads/soltros-os-lts_gnome")
                echo "Publishing due to push to target branch"
                echo "publish=true" >> "$GITHUB_OUTPUT"
                ;;
              *)
                echo "Not publishing - push to non-target branch"
                echo "publish=false" >> "$GITHUB_OUTPUT"
                ;;
            esac
          else
            echo "Not publishing - event type does not qualify"
            echo "publish=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        if: steps.publish.outputs.publish == 'true'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        if: steps.publish.outputs.publish == 'true'
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        if: steps.publish.outputs.publish == 'true'

      - name: Sign container image
        if: steps.publish.outputs.publish == 'true'
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          IMAGE_FULL="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY "$IMAGE_FULL@${{ env.DIGEST }}"
